


!
We saw that when executing the message #addAtStartupInPreferenceVersionFolder: items named:aFilename or any of its variant, a file is created with the code we want to evaluate. Then, when the system starts it will find our file and execute our code. But, how is the resulting file? Exactly as the code we provided? No! Look how our example file '/Users/mariano/.config/pharo/2.0/basicSettings.st' is generated:


[[[
StartupLoader default executeAtomicItems: {
StartupAction name: 'Basic settings' code: [Author fullName: 'MarianoMartinezPeck'.
Debugger alwaysOpenFullDebugger: true].
}.
]]]
So as you can see, the file is generated by sending a collection of actions to “StartupLoader default executeAtomicItems:”. In this example the collection has only one action, but it would have more if our example has more. So now the StartupLoader will execute all the actions found in the file. Do we execute all actions? No! Actions can be built with a property of “runOnce”. So if an action has already been executed in the current image before the last save, it is not executed again. Executed actions are stored in the singleton instance #default of StartupLoader. Therefore, you have to save the image. If an action generates an error the action is NOT registered as executed. In addition, errors are also stored in the singleton of StartupLoader so you can query them after starting the image by inspecting the result of “StartupLoader default errors”.

Advanced example
As an advanced example, I want to show you the script I am using for my images. For that, I have this Smalltalk code:


setPersonalStartUpPreferences
"self setPersonalStartUpPreferences"
| items |
items := OrderedCollection new.
 
items add: (StartupAction name: 'General Preferences for all Pharo versions' code: [
FileStream stdout lf; nextPutAll: 'Setting general preferences for all Pharo versions'; lf.
Author fullName: 'MarianoMartinezPeck'.
FileStream stdout lf; nextPutAll: 'Finished'; lf.
]).
StartupLoader default addAtStartupInGeneralPreferenceFolder: items named: 'generalSettings.st'.
 
items add: (StartupAction name: 'Settings' code: [
FileStream stdout lf; nextPutAll: 'Setting general preferences'; lf.
UITheme currentSettings fastDragging: true.
CodeHolder showAnnotationPane: true.
MCCodeTool showAnnotationPane: true.
Deprecation raiseWarning: true.
Debugger alwaysOpenFullDebugger: true.
Parser warningAllowed: false.
FileStream stdout lf; nextPutAll: 'Finished'; lf.
]).
StartupLoader default addAtStartupInPreferenceVersionFolder: items named: 'settings.st'.
 
items removeAll.
items add: (StartupAction name: 'Nautilus' code: [
FileStream stdout lf; nextPutAll: 'Executing Nautilus related stuff'; lf.
Nautilus pluginClasses add: { NautilusBreadcrumbsPlugin. #top }.
Nautilus pluginClasses add: { AnnotationPanePlugin. #middle }.
FileStream stdout lf; nextPutAll: 'Finished'; lf.
] runOnce: true).
StartupLoader default addAtStartupInPreferenceVersionFolder: items named: 'nautilus.st'.
 
items removeAll.
items add: (StartupAction name: 'Monticello related stuff' code: [
| sharedPackageCacheDirectory |
FileStream stdout lf; nextPutAll: 'Executing Monticello related stuff'; lf.
sharedPackageCacheDirectory := (FileDirectory on: '/Users/mariano/Pharo/localRepo/')
assureExistence;
yourself.
MCCacheRepository default directory: sharedPackageCacheDirectory.
MCDirectoryRepository defaultDirectoryName: '/Users/mariano/Pharo/localRepo/'.
(MCRepositoryGroup default  repositories
select: [:each | (each isKindOf: MCHttpRepository)
and: [((each locationWithTrailingSlash includesSubString: 'www.squeaksource.com')
or: [each locationWithTrailingSlash includesSubString: 'http://ss3.gemstone.com/ss/'])]
]) do: [:each |
each
user: 'MMP';
password: ((FileDirectory default oldFileNamed: '/Users/mariano/Pharo/repositoriesPassword.txt') contents).
].
FileStream stdout lf; nextPutAll: 'Finished'; lf.
]).
StartupLoader default addAtStartupInPreferenceVersionFolder: items named: 'monticello.st'.
Basically, I have 4 files to customize stuff: 1) general settings;  2) settings for Pharo 2.0; 3) nautilus and 4) monticello related stuff. 1) is for all Pharo versions. So far I am just setting my username. 2) 3) and 4) are for Pharo 2.0 (just because I know they work in Pharo 2.0 and I am not sure if they work in other versions). For nautilus, I don't want to add the plugins each time (because it would add the plugin several times) so I create a StartupAction using the message #name: nameOfItem code: code runOnce: aBoolean  passing a true to aBoolean.

Using the tool
How to split your stuff in files and actions?
So you may have noticed that: a) #addAtStartupInPreferenceVersionFolder: and friends expect a list of actions; b) you can have multiples files. So, how do you split your code? From what I can see in the framework, there is no restriction. You can have as many actions per files and as many files as you wish. An action has a block of closure that can contain as much code as you want.

I found that one way of splitting your code is when some actions need to be executed only once and some other each time. Another reason may be some code which may be expected to fail for some reason. If it fails, the code after the line that generated the error won't be executed. Hence, you may want to split that code to a separate action.

How to version and work with this tool?
The way I found to work with this stuff is to have my own class GeneralImageBuilder (put whatever name you want). In such class I have the mentioned method #setPersonalStartUpPreferences (from the advanced example). So I use Monticello to save and load that project. Then, whenever I want to create the script files and add them to their correct directory, I just evaluate that method.

Be careful with the cache!
In order to support the “runOnce:”, actions are stored in the singleton instance of StartupLoader. After an action is executed (if executed correctly), the action is stored and marked as “executed”. It may happen that later on you modify the scripts by hand, or you change the rules and re-store them or some kind of black magic. So…if you change some of these, I recommend to do 2 things:

Remove all existing files from the preference directories (no script is removed automatically). Check methods #remove* in StartupLoader.
Remove the existing stored actions in StartupLoader. Check method #cleanSavedActionsAndErrors and #removeAllScriptsAndCleanSavedActions.
Conclusion
I think that the tool is very nice. It is just 3 classes and a very few methods. I have been improving it recently but still, there could be more improvements. Wanna help?  I wanted to summarize this post and write a better class comment, but I am running out of free time. In addition, it would be nice to have some tests 

I want to thank to Benjamin Van Ryseghem for doing the first version of the tool and to Ben Coman for fixing the preference folder in Windows and for discussing with me about the performed improvements.

Hope you like it!


!! Saving

!! Default place to look

!! Shared

If you create a folder named \ct{pharo} under \ct{Library/Preferences} and pour

[[[
cd
cd Library/Preferences
mkdir pharo
]]]

-- should it be named settings.st?




!!materials

StartupLoader searches for and executes .st files from certain locations.  To find these it searches for a '.config' folder in the folder next up from where the image file sits.  Then it looks in the next folder up again and so on until reaching the root folder.  When a '.config' folder is found, StartupLoader looks within this for a 'pharo' folder. This contains the startup scripts common to all versions of Pharo, and also optionally a folder per Pharo version holding startup scripts suitable for that version only.  So a typical directory layout might be...

.../some/folders/pharo/Content/Resources/pharo.image.
.../some/folders/pharo/Content/Resources/startup.st
.../some/folders/.config/pharo/author.st
.../some/folders/.config/pharo/useSharedCache.st
.../some/folders/.config/pharo/1.4/mystartupFor14only.st
.../some/folders/.config/pharo/2.0/mystartupFor20only.st

(**Note however that '.config' is an invalid filename on Windows, so '..config' is used instead)

IMPORTANT: StartupLoader will search for a folder '.config' starting from the image directory until the root of the filesystem. What happens if no folder is found? It creates '.config' in the image folder. However, it is recommended that you create the '.config' following the standard, that is, in the $HOME.

To know the real values for you...
Print the result of "FileDirectory preferencesGeneralFolder" which holds the startup scripts common to all versions of Pharo.
Print the result of "FileDirectory preferencesVersionFolder" which holds the startup scripts specific to the version of the current image.

-----------


StartupLoader example

will define a script sample startup.st in your unix root on unix 

Its contents is 

StartupLoader default executeAtomicItems: {
	StartupAtomicItem name: 'Open Help' code: 'Workspace openContents: ''Here is just an example of how to use the StartupLoader.
I should only be displayed once.
	
You can also see StartupLoader class>>#example'' label: ''Help''' isSingleton: true.
	StartupAtomicItem name: 'Open Workspace' code: 'Workspace openContents: ''I should be displayed each time'''.
}

For a more complete example, see StartupLoader class>>#example2





Camillo example

"Put this in ~/Library/Preferences/pharo/ "

Smalltalk isHeadless ifFalse: [
StartupLoader default executeAtomicItems: {
StartupAction name: 'Image Setup' code: [
| color red green yellow white isIssueImage |

"============================================================================="
"some helper blocks for error printing"
color := [:colorCode :text|
    FileStream stderr 
        "set the color"
        nextPut: Character escape; nextPut: $[; print: colorCode; nextPut: $m;
        nextPutAll: text; crlf;
        "reset the color"
        nextPut: Character escape; nextPutAll: '[0m'.
].

red    := [:text| color value: 31 value: text ].
green  := [:text| color value: 32 value: text ].
yellow := [:text| color value: 33 value: text ].
white  := [:text| FileStream stderr nextPutAll: text; crlf ].

"Check whether we use an image for issue reporting"
isIssueImage := Smalltalk imageFile basename first isDigit.

"============================================================================="

Author fullName: 'Camillo Bruni'.

"============================================================================="

[
	yellow value: 'Loading custom preferences'.

	Debugger 
		alwaysOpenFullDebugger: true;
		filterCommonMessageSends: true.


	white value: '- set default fonts'.
	StandardFonts defaultFont: (LogicalFont familyName: 'Consolas' pointSize: 10).
	GraphicFontSettings resetAllFontToDefault.

	white value: '- preparing tools'.
	PolymorphSystemSettings 
		desktopColor: Color gray;
		showDesktopLogo: false.

	"UITheme currentSettings fastDragging: true."

	TextEditorDialogWindow autoAccept: true.

	SHPreferences setStyleTableNamed: 'Tango'.

	UITheme currentSettings
		preferGradientFill: false;
		preferRoundCorner: true;
		menuColor: Color white.

	yellow value: 'loading eclipse icons'.
	isIssueImage ifFalse: [
		(SystemVersion current major >= 3) ifTrue: [
			Gofer new
				smalltalkhubUser: 'estebanlm' project: 'EclipsePack';
				package: 'EclipsePack';
				load.
			ThemeIcons current: EclipseUIThemeIcons new.
			World resetWorldMenu.
			NautilusUI resetIconCaches ]].
	(isIssueImage and: [ Smalltalk isInteractive ])
		ifTrue: [ | slice |
			"open a slice inspector"
			slice := (Smalltalk imageFile basename copyUpTo: $-).
			(MCFileRepositoryInspector repository: (MCHttpRepository inboxRepository) workingCopy: nil)
				versionSearchAccept: slice;
				show.
		]
] fork.

white value: '- enabling TrueType fonts'.
FreeTypeSystemSettings loadFt2Library: true.
"============================================================================="

(Workspace new contents: '';
    openLabel: '')
	width: 1200; height: 230;
	setToAdhereToEdge: #bottomLeft;
	makeUnclosable.

MCWorkingCopyBrowser new show window
	width: 700; height: 230;
	setToAdhereToEdge: #topLeft;
	makeUnclosable.


] 
runOnce: true}].


% Local Variables:
% eval: (flyspell-mode -1)
% End:
